'''articles/models.py'''
from django.db import models
from django.contrib.postgres.fields import ArrayField
from django.utils.text import slugify
from authors.apps.authentication.models import User


class Article(models.Model):
    '''Model representing articles'''
    title = models.CharField(db_index=True, max_length=255)
    body = models.TextField()
    images = ArrayField(models.TextField(), default=None,
                        blank=True, null=True)
    description = models.CharField(max_length=255)
    slug = models.SlugField(max_length=40, unique=True)
    tags = ArrayField(models.CharField(max_length=30),
                      default=None, blank=True, null=True)
    time_to_read = models.IntegerField()
    # auto_now_add automatically sets the field to now when the object is first created.
    time_created = models.DateTimeField(auto_now_add=True, db_index=True)
    # auto_now will update every time you save the model.
    time_updated = models.DateTimeField(auto_now=True, db_index=True)
    author = models.ForeignKey(User, on_delete=models.CASCADE)
    average_rating = models.IntegerField(default=0)
    likes = models.ManyToManyField(User, related_name='comment_likes', blank=True)
    dislikes = models.ManyToManyField(User, related_name='comment_dislikes', blank=True)

    class Meta():
        '''Meta class defining order'''
        ordering = ('time_created', 'time_updated',)

    def save(self, *args, **kwargs):
        '''override save from super'''
        super(Article, self).save(*args, **kwargs)

    def __str__(self):
        '''return string representation of object'''
        return self.title


class Comment(models.Model):
    """
    This class implement a database table.
    This table has  seven fields one is automatically generated by django
    The relationship between articles and comments is one to many
    The relationship between comment and reply is one to many.
    the relationship between Author and comments is one to many 
    """
    parent = models.ForeignKey(
        'self', null=True, blank=False, on_delete=models.CASCADE, related_name='thread')
    article = models.ForeignKey(
        Article,  blank=True, null=True, on_delete=models.CASCADE, related_name='comments')
    author = models.ForeignKey(
        User, blank=True, null=True, on_delete=models.CASCADE, related_name='comments')
    body = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.body
